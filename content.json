{"meta":{"title":"iT豆","subtitle":"天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。","description":null,"author":"JXY","url":"http://yoursite.com"},"pages":[{"title":"Categories","date":"2018-09-07T09:05:06.973Z","updated":"2018-09-07T09:05:06.973Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-06-06T02:23:21.000Z","updated":"2018-09-07T09:05:06.991Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"单点登录nginx代理及开发环境调试配置","slug":"单点登录nginx代理及开发环境调试配置","date":"2018-11-16T07:22:00.000Z","updated":"2018-11-16T08:12:01.177Z","comments":true,"path":"2018/11/16/单点登录nginx代理及开发环境调试配置/","link":"","permalink":"http://yoursite.com/2018/11/16/单点登录nginx代理及开发环境调试配置/","excerpt":"","text":"最近做项目，遇到单点登录，方法是在前端做nginx代理。应用系统需要配合做如下调整：1、使用“*.顶级域名”访问，确保可以和KAM共享cookie2、对来自Nginx代理的访问放开登录认证（安全起见，对来自其他IP的访问应该禁止）3、应用系统从请求头kam_remote_user中读取登录用户（Nginx会将登录用户写入请求头）4、如果应用系统需要KAM的全局唯一token，可以从cookie中读取kam_sso_token的值 刚开始调试的时候是在正式环境，每次修改完代码需要重新构建才能看到效果，实在繁琐，还产生了一堆不必要的commit 历史。调通之后开始思考如何在本地开发环境调试单点登录这一功能。不辱使命，研究出来了，以下是步骤。 1、配置项目 nginx.conf123456789101112131415161718192021location / &#123; root /usr/share/nginx/html; auth_request /kam_auth; error_page 401 = @error401; auth_request_set $kam_remote_url $upstream_http_kam_remote_url; proxy_set_header kam_remote_user $upstream_http_kam_remote_user; &#125; location /kam_auth &#123; internal; proxy_set_header kam_remote_url \"$scheme://$http_host$request_uri\"; proxy_set_header Host $host; proxy_pass_request_body off; proxy_set_header Content-Length \"\"; proxy_pass 单点登录页面网址/auth; &#125; location @error401 &#123; add_header Set-Cookie \"NSREDIRECT=$kam_remote_url;Path=/;Domain=顶级域名\"; return 302 单点登录页面网址; &#125; 配置完后发布到正式环境，单点登录功能已可用 继续配置，我们的目标是 dev 环境也能单点登录！ 2、虚拟域名修改hosts文件 C:\\Windows\\System32\\drivers\\etc加入 127.0.0.1 dev.kukagroup.com之后，把原来的dev运行地址 http://localhost:8080 换成 http://dev.kukagroup.com:8080 发现可以访问了 3、下载 nginxnginx官网上下载相应的安装包下载进行解压，将解压后的文件放到自己心仪的目录下。window的cmd窗口，进入到nginx目录，使用 start nginx.exe 进行nginx的安装，如下图所示 安装成功，后在浏览器地址栏输入：127.0.0.1，会看到如下图所示的nginx欢迎界面 如果看不到，那么说明你安装失败，你可以到你的 nginx 目录下的logs文件夹下的error下查看，如果发现里面写着： 说明你的80端口被占用了，或是cmd命令进入dos下执行：netstat -aon | findstr :80 查看80端口是否被占用，如果占用，那么你需要修改注册表，如下步骤：1、打开注册表：regedit2、找到：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\HTTP3、找到一个REG_DWORD类型的项Start，将其改为04、重启系统，System进程不会占用80端口此时此刻，你可以再次执行 相应的命令：start nginx.exe 命令了。 nginx相关命令：start nginx.exenginx.exe -s stop //停止nginxnginx.exe -s reload //重新加载nginxnginx.exe -s quit //退出nginx 因为我们已经配置了虚拟域名，所以在浏览器地址栏输入 http://dev.kukagroup.com 也是同样的 nginx welcome 页面 3、配置本地 nginx 文件修改 nginx 目录下的 conf/nginx.conf 文件12345678910111213141516171819202122location / &#123; root html; index index.html index.htm; auth_request /kam_auth; error_page 401 = @error401; auth_request_set $kam_remote_url $upstream_http_kam_remote_url; proxy_set_header kam_remote_user $upstream_http_kam_remote_user; proxy_pass http://dev.kukagroup.com:8080; &#125; location /kam_auth &#123; internal; proxy_set_header kam_remote_url \"$scheme://$http_host$request_uri\"; proxy_set_header Host $host; proxy_pass_request_body off; proxy_set_header Content-Length \"\"; proxy_pass 单点登录页面网址/auth; &#125; location @error401 &#123; add_header Set-Cookie \"NSREDIRECT=$kam_remote_url;Path=/;Domain=顶级域名\"; return 302 单点登录页面网址; &#125; 现在，在浏览器地址栏输入 http://dev.kukagroup.com 发现自动跳转到了单点登录页面，登录后返回到了我们之前的dev.kukagroup.com页面","categories":[],"tags":[{"name":"nginx 代理","slug":"nginx-代理","permalink":"http://yoursite.com/tags/nginx-代理/"}]},{"title":"test","slug":"test","date":"2018-11-06T07:03:13.000Z","updated":"2018-11-06T07:09:22.684Z","comments":true,"path":"2018/11/06/test/","link":"","permalink":"http://yoursite.com/2018/11/06/test/","excerpt":"","text":"1. 手机号1/^1[34578]\\d&#123;9&#125;$/ 2. 短身份证号码123/^\\d&#123;18&#125;|\\d&#123;17&#125;(x|X)$//^\\d&#123;6&#125;(18|19|20)?\\d&#123;2&#125;(0[1-9]|1[012])(0[1-9]|[12]\\d|3[01])\\d&#123;3&#125;(\\d|[xX])$/ xxxxxx yyyy MM dd 375 0 十八位xxxxxx yy MM dd 75 0 十五位正则表达式: 出生日期1800-2099 (18|19|20)?\\d{2}(0[1-9]|1[012])(0[1-9]|[12]\\d|3[01]) 身份证正则表达式 /^\\d{6}(18|19|20)?\\d{2}(0[1-9]|1[012])(0[1-9]|[12]\\d|3[01])\\d{3}(\\d|[xX])$/ 位校验规则 6位地址编码+8位出生日期+3位顺序号+1位校验位。 3. email1/^[A-Za-z0-9\\u4e00-\\u9fa5]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/ 名称@域名名称可以包含汉字、字母、数字，域名只允许为英文和数字一般域名的规律为“[N级域名][三级域名.]二级域名.顶级域名”，比如“qq.com”、“www.qq.com”、“mp.weixin.qq.com”、“12-34.com.cn”，分析可得域名类似“xx .xx .xx .xx”组成。 4. 车牌现在大多数车牌1/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/ 第二：新能源车123/^([\\u4e00-\\u9fa5][a-zA-Z](([DF](?![IO])[a-zA-Z0-9][0-9]&#123;4&#125;)|([0-9]&#123;5&#125;[DF])))|([冀豫云辽黑湘皖鲁苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼渝京津沪新京军空海北沈兰济南广成使领A-Z]&#123;1&#125;[a-zA-Z0-9]&#123;5&#125;[a-zA-Z0-9挂学警港澳]&#123;1&#125;)$/^(([\\u4e00-\\u9fa5]&#123;1&#125;[A-Z]&#123;1&#125;)[-]?|([wW][Jj][\\u4e00-\\u9fa5]&#123;1&#125;[-]?)|([a-zA-Z]&#123;2&#125;))([A-Za-z0-9]&#123;5&#125;|[DdFf][A-HJ-NP-Za-hj-np-z0-9][0-9]&#123;4&#125;|[0-9]&#123;5&#125;[DdFf])$/ 组成：省份简称（1位汉字）+发牌机关代号（1位字母）+序号（6位），总计8个字符，序号不能出现字母I和字母O通用规则：不区分大小写，第一位：省份简称（1位汉字），第二位：发牌机关代号（1位字母）序号位： 1) 小型车，第一位：只能用字母D或字母F，第二位：字母或者数字，后四位：必须使用数字 2) 大型车，前五位：必须使用数字，第六位：只能用字母D或字母F。","categories":[],"tags":[]},{"title":"webpack打包后某些代码失效的解决方案","slug":"webpack打包后某些代码失效的解决方案","date":"2018-10-25T02:39:35.000Z","updated":"2018-10-25T02:49:53.467Z","comments":true,"path":"2018/10/25/webpack打包后某些代码失效的解决方案/","link":"","permalink":"http://yoursite.com/2018/10/25/webpack打包后某些代码失效的解决方案/","excerpt":"本文列出几种遇到过的，webpack打包代码后，某些功能或样式失效的情况及解决方案： 打包后丢失属性 -webkit-box-orient: vertical","text":"本文列出几种遇到过的，webpack打包代码后，某些功能或样式失效的情况及解决方案： 打包后丢失属性 -webkit-box-orient: vertical 1. 多行溢出省略的样式，打包后失效, -webkit-box-orient:vertical 丢失,解决方法如下12345678910111213.omit &#123; overflow:hidden; text-overflow: ellipsis; display:-webkit-box; -webkit-line-clamp:1; /*! autoprefixer: off */ -webkit-box-orient: vertical; // 参考 https://github.com/postcss/autoprefixer/issues/776 /* autoprefixer: on */ /*解决打包后 -webkit-box-orient: vertical 丢失*/&#125;","categories":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/categories/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/tags/webpack/"}]},{"title":"修改浏览器默认css","slug":"修改浏览器默认css","date":"2018-10-25T02:13:12.000Z","updated":"2018-10-25T02:40:26.730Z","comments":true,"path":"2018/10/25/修改浏览器默认css/","link":"","permalink":"http://yoursite.com/2018/10/25/修改浏览器默认css/","excerpt":"本文列出几种遇到过的，需要修改浏览器默认CSS样式的情况及解决方法： 修改input框placeholder的字体颜色 修改浏览器记住密码后输入框的背景色","text":"本文列出几种遇到过的，需要修改浏览器默认CSS样式的情况及解决方法： 修改input框placeholder的字体颜色 修改浏览器记住密码后输入框的背景色 1. 修改input框placeholder的字体颜色12345678910111213141516input::-webkit-input-placeholder, textarea::-webkit-input-placeholder &#123; /* WebKit browsers */ color: #6377B9;&#125;input:-moz-placeholder, textarea:-moz-placeholder &#123; /* Mozilla Firefox 4 to 18 */ color: #6377B9;&#125;input::-moz-placeholder, textarea::-moz-placeholder &#123; /* Mozilla Firefox 19+ */ color: #6377B9;&#125;input:-ms-input-placeholder, textarea:-ms-input-placeholder &#123; /* Internet Explorer 10+ */ color: #6377B9;&#125; 2. 修改浏览器记住密码后输入框的背景色前言： 谷歌浏览器、在记住密码后，通常会给用户密码输入框渲染上一个背景色，在有些时候这个浏览器自动使用的渲染背景色会影响系统本身的UI界面，所以下面提供css方法处理解决。12345678910111213/*处理浏览器输入框记住账号密码后的背景色*/ input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill &#123; -webkit-text-fill-color: #ededed !important; -webkit-box-shadow: 0 0 0 1000px transparent inset !important; background-color: transparent; background-image: none; transition: background-color 50000s ease-in-out 0s; //背景色透明 生效时长 过渡效果 启用时延迟的时间 &#125; input &#123; background-color: transparent; &#125;","categories":[{"name":"意想不到的css","slug":"意想不到的css","permalink":"http://yoursite.com/categories/意想不到的css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"vue迁移webpack4","slug":"vue迁移webpack4","date":"2018-09-11T03:10:24.000Z","updated":"2018-10-25T02:48:17.505Z","comments":true,"path":"2018/09/11/vue迁移webpack4/","link":"","permalink":"http://yoursite.com/2018/09/11/vue迁移webpack4/","excerpt":"","text":"123456(node:10768) DeprecationWarning: Tapable.plugin is deprecated. Use new API on `.hooks` instead(node:10768) DeprecationWarning: Tapable.apply is deprecated. Call apply on the plugin directly insteadnpm install extract-text-webpack-plugin@next --save-dev vue-loader was used without the corresponding plugin. Make sure to include VueLoaderPlugin in your webpack config. . Vue-loader在15.*之后的版本都是 vue-loader的使用都是需要伴生 VueLoaderPlugin的, . 在webpack.config.js中加入 const VueLoaderPlugin = require(‘vue-loader/lib/plugin’); plugins: [ // make sure to include the plugin for the magic new VueLoaderPlugin() ],","categories":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/categories/webpack/"}],"tags":[{"name":"Vue webpack","slug":"Vue-webpack","permalink":"http://yoursite.com/tags/Vue-webpack/"}]},{"title":"webpack打包优化（Vue）","slug":"webpack打包优化（Vue）","date":"2018-09-10T03:20:00.000Z","updated":"2018-09-10T09:22:01.821Z","comments":true,"path":"2018/09/10/webpack打包优化（Vue）/","link":"","permalink":"http://yoursite.com/2018/09/10/webpack打包优化（Vue）/","excerpt":"","text":"注意 devtool 中的 source-map。如果你打包后的文件莫名其妙的好几 MB的大小, 那不用想了肯定是 source-map 的问题, 注意 source-map 的那种几种类型使用.建议在production环境打包的时候关闭 devtool. 如果非得在线上使用 source-map, 可以配置为 devtool: “#source-map”, 使 css 剥离 js 文件, 将 css 单独打包。依赖插件 npm install –save-dev extract-text-webpack-plugin 先安装再使用1234var ExtractTextPlugin = require('extract-text-webpack-plugin'); //在 plugins 中配置 plugins: [ new ExtractTextPlugin('[name].[contenthash].css') ] 把 css 单独打包出来，免得以后只修改 css 导致 浏览器端 js 的缓存也失效了。这里使用了 contenthash, webpack 会按照内容去生成 hash 值。 压缩, 去除注释 1234567//在 plugins 中添加 new webpack.optimize.UglifyJsPlugin(&#123; comments: false, //去掉注释 compress: &#123; warnings: false //忽略警告,要不然会有一大堆的黄色字体出现…… &#125; &#125;)","categories":[],"tags":[{"name":"webpack vue","slug":"webpack-vue","permalink":"http://yoursite.com/tags/webpack-vue/"}]},{"title":"webpack-bundle-analyzer","slug":"webpack-bundle-analyzer","date":"2018-09-10T02:47:18.000Z","updated":"2018-10-25T02:41:04.904Z","comments":true,"path":"2018/09/10/webpack-bundle-analyzer/","link":"","permalink":"http://yoursite.com/2018/09/10/webpack-bundle-analyzer/","excerpt":"","text":"查看 webpack 打包后所有组件与组件间的依赖关系，如下图 vue-cli 已默认安装 webpack-bundle-analyzer 运行 npm run build --report 即可查看","categories":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/categories/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/tags/webpack/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-09-07T09:05:06.963Z","updated":"2018-09-07T09:05:06.964Z","comments":true,"path":"2018/09/07/hello-world/","link":"","permalink":"http://yoursite.com/2018/09/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"CSS3 3D transform变换","slug":"CSS3-3D-transform变换","date":"2018-07-26T06:17:24.000Z","updated":"2018-09-07T09:05:06.960Z","comments":true,"path":"2018/07/26/CSS3-3D-transform变换/","link":"","permalink":"http://yoursite.com/2018/07/26/CSS3-3D-transform变换/","excerpt":"","text":"张鑫旭-CSS3 3D transform变换","categories":[{"name":"意想不到的css","slug":"意想不到的css","permalink":"http://yoursite.com/categories/意想不到的css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"npm升级依赖包","slug":"npm升级依赖包","date":"2018-07-26T05:27:45.000Z","updated":"2018-09-07T09:05:06.966Z","comments":true,"path":"2018/07/26/npm升级依赖包/","link":"","permalink":"http://yoursite.com/2018/07/26/npm升级依赖包/","excerpt":"使用npm管理node的包，可以使用npm update 对单个包升级 npm-check是用来检查npm依赖包是否有更新，错误以及不在使用的，我们也可以使用npm-check进行包的更新。","text":"使用npm管理node的包，可以使用npm update 对单个包升级 npm-check是用来检查npm依赖包是否有更新，错误以及不在使用的，我们也可以使用npm-check进行包的更新。 安装npm-check：1npm install -g npm-check 检查npm包的状态：1npm-check -u -g 通过上下键可以移动光标，使用空格键可以选择需要处理的包，回车直接进行处理。 npm升级所有的依赖包","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"}]},{"title":"js小技巧集合","slug":"js小技巧集合","date":"2018-07-26T05:22:27.000Z","updated":"2018-09-07T09:05:06.964Z","comments":true,"path":"2018/07/26/js小技巧集合/","link":"","permalink":"http://yoursite.com/2018/07/26/js小技巧集合/","excerpt":"","text":"1、去除字符串中的特殊符号 思路：正则表达式匹配 123var a=\"今天是星期五， 明天又可以放假了&amp;好好休|息一下\"var b=a.replace(/[&amp;\\|\\\\\\*^%$#@\\-]/g,\"\");alert(b);","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"height、clientHeight、scrollHeight、offsetHeight区别","slug":"height、clientHeight、scrollHeight、offsetHeight区别","date":"2018-07-24T07:53:30.000Z","updated":"2018-09-07T09:05:06.963Z","comments":true,"path":"2018/07/24/height、clientHeight、scrollHeight、offsetHeight区别/","link":"","permalink":"http://yoursite.com/2018/07/24/height、clientHeight、scrollHeight、offsetHeight区别/","excerpt":"","text":"1、偏移量：包括元素在屏幕上占用的所有可见空间（包括内边距、滚动条、边框大小）其中 offsetLeft 和 offsetTop 都与包含元素有关1234567891011121314151617181920// 获取元素在页面上的偏移量function getElementLeft(element)&#123; var actualLeft = element.offsetLeft; var current = element.offsetParent; while (current !== null)&#123; actualLeft += current.offsetLeft; current = current.offsetParent; &#125; return actualLeft;&#125;function getElementTop(element)&#123; var actualTop = element.offsetTop; var current = element.offsetParent; while (current !== null)&#123; actualTop += current. offsetTop; current = current.offsetParent; &#125; return actualTop;&#125; 2、客户区大小：指的是元素内容及其内边距所占的空间大小（不包括滚动条和边框）1234567891011121314// 确定浏览器视口大小function getViewport()&#123; if (document.compatMode == \"BackCompat\")&#123; // 混杂模式 return &#123; width: document.body.clientWidth, height: document.body.clientHeight &#125;; &#125; else &#123; return &#123; width: document.documentElement.clientWidth, height: document.documentElement.clientHeight &#125;; &#125;&#125; 3、滚动大小：指的是包含滚动内容的元素的大小（不包括滚动条和边框）scrollWidth 和 scrollHeight 主要用于确定元素内容的实际大小","categories":[],"tags":[]},{"title":"el-input如何监听回车键","slug":"el-input如何监听回车键","date":"2018-06-21T06:50:32.000Z","updated":"2018-09-07T09:05:06.962Z","comments":true,"path":"2018/06/21/el-input如何监听回车键/","link":"","permalink":"http://yoursite.com/2018/06/21/el-input如何监听回车键/","excerpt":"","text":"官方暴露的事件中貌似没有enter事件，不过可以在el-input上写 @keyup.enter.native 实现捕抓事件","categories":[{"name":"element-ui的扩展","slug":"element-ui的扩展","permalink":"http://yoursite.com/categories/element-ui的扩展/"}],"tags":[{"name":"element-ui vue","slug":"element-ui-vue","permalink":"http://yoursite.com/tags/element-ui-vue/"}]},{"title":"radial-gradient径向渐变","slug":"radial-gradient","date":"2018-06-20T09:18:45.000Z","updated":"2018-09-07T09:05:06.967Z","comments":true,"path":"2018/06/20/radial-gradient/","link":"","permalink":"http://yoursite.com/2018/06/20/radial-gradient/","excerpt":"","text":"张鑫旭-radial-gradient径向渐变","categories":[{"name":"意想不到的css","slug":"意想不到的css","permalink":"http://yoursite.com/categories/意想不到的css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"linear-gradient线性渐变","slug":"linear-gradient","date":"2018-06-20T09:18:45.000Z","updated":"2018-09-07T09:05:06.965Z","comments":true,"path":"2018/06/20/linear-gradient/","link":"","permalink":"http://yoursite.com/2018/06/20/linear-gradient/","excerpt":"","text":"张鑫旭-linear-gradient线性渐变 CSS纹理网站-CSS3 Patterns Gallery jsfiddle-线性渐变实现多边形","categories":[{"name":"意想不到的css","slug":"意想不到的css","permalink":"http://yoursite.com/categories/意想不到的css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"文字渐变色","slug":"文字渐变色","date":"2018-06-20T08:49:00.000Z","updated":"2018-09-07T09:05:06.971Z","comments":true,"path":"2018/06/20/文字渐变色/","link":"","permalink":"http://yoursite.com/2018/06/20/文字渐变色/","excerpt":"利用css3背景色的渐变 background-clip + text-fill-color 来实现 1234567&lt;h1 class=\"text\"&gt;文字渐变效果&lt;/h1&gt; .text&#123; background-image: -webkit-gradient(linear, 0 0, 0 bottom, from(rgba(0, 128, 0, 1)), to(rgba(51, 51, 51, 1))); -webkit-background-clip: text; -webkit-text-fill-color: transparent; &#125;","text":"利用css3背景色的渐变 background-clip + text-fill-color 来实现 1234567&lt;h1 class=\"text\"&gt;文字渐变效果&lt;/h1&gt; .text&#123; background-image: -webkit-gradient(linear, 0 0, 0 bottom, from(rgba(0, 128, 0, 1)), to(rgba(51, 51, 51, 1))); -webkit-background-clip: text; -webkit-text-fill-color: transparent; &#125; 其核心思想是下面三句话： 第一句：background-image: -webkit-gradient(linear, 0 0, 0 bottom, from(rgba(0, 128, 0, 1)), to(rgba(51, 51, 51, 1))); （通过CSS3实现背景色渐变效果。这里是从左下角至右上角的线性渐变。） 第二句：-webkit-background-clip: text; （规定背景的绘制区域为文字部分。） 之前接触过的background-clip有下面几种取值： background-clip: border-box（默认）｜padding-box｜content-box; 意思分别是，背景被裁剪到边框盒 | 背景被裁剪到内边距框｜背景被裁剪到内容框。 background-clip与box-sizing感觉有异曲同工之妙～ 第三句：-webkit-text-fill-color: transparent; （文字填充颜色） ＊这里注意一定要定义为transparent，否则会覆盖底部的背景色。","categories":[{"name":"意想不到的css","slug":"意想不到的css","permalink":"http://yoursite.com/categories/意想不到的css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"requestAnimationFrame","slug":"requestAnimationFrame","date":"2018-06-19T05:50:54.000Z","updated":"2018-09-07T09:05:06.968Z","comments":true,"path":"2018/06/19/requestAnimationFrame/","link":"","permalink":"http://yoursite.com/2018/06/19/requestAnimationFrame/","excerpt":"在做页面动画的时候，比如跑马灯，以前会用 setTimeout 、setInterval，但是为了更好的平稳过渡效果，现在会用 requestAnimationFrame 。特别是在 three.js 等3D鼠标交互页面中，requestAnimationFrame 是必备的。","text":"在做页面动画的时候，比如跑马灯，以前会用 setTimeout 、setInterval，但是为了更好的平稳过渡效果，现在会用 requestAnimationFrame 。特别是在 three.js 等3D鼠标交互页面中，requestAnimationFrame 是必备的。 设置这个API的目的是为了让各种网页动画效果（DOM动画、Canvas动画、SVG动画、WebGL动画）能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。代码中使用这个API，就是告诉浏览器希望执行一个动画，让浏览器在下一个动画帧安排一次网页重绘。 requestAnimationFrame的优势，在于充分利用显示器的刷新机制，比较节省系统资源。显示器有固定的刷新频率（60Hz或75Hz），也就是说，每秒最多只能重绘60次或75次，requestAnimationFrame的基本思想就是与这个刷新频率保持同步，利用这个刷新频率进行页面重绘。此外，使用这个API，一旦页面不处于浏览器的当前标签，就会自动停止刷新。这就节省了CPU、GPU和电力。 不过有一点需要注意，requestAnimationFrame是在主线程上完成。这意味着，如果主线程非常繁忙，requestAnimationFrame的动画效果会大打折扣。 目前，主要浏览器Firefox 23 / IE 10 / Chrome / Safari）都支持这个方法。可以用下面的方法，检查浏览器是否支持这个API。如果不支持，则自行模拟部署该方法。12345678910window.requestAnimFrame = (function()&#123; return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function( callback )&#123; window.setTimeout(callback, 1000 / 60); &#125;;&#125;)(); 上面的代码按照1秒钟60次（大约每16.7毫秒一次），来模拟requestAnimationFrame。 requestAnimationFrame使用一个回调函数作为参数。这个回调函数会在浏览器重绘之前调用。使用requestAnimationFrame的时候，只需反复调用它即可。123456function repeatOften() &#123; // Do whatever requestAnimationFrame(repeatOften);&#125;requestID = requestAnimationFrame(repeatOften); cancelAnimationFrame方法用于取消重绘。1window.cancelAnimationFrame(requestID); 下面以我在vue项目里写的跑马灯为例，介绍 requestAnimationFrame 的使用123456789101112131415161718192021mounted () &#123; this.wrap = document.getElementById('moveWarp') this.timer = requestAnimationFrame(this.move) // 开始动画 this.wrap.onmouseover = () =&gt; &#123; window.cancelAnimationFrame(this.timer) // 介绍动画 &#125; this.wrap.onmouseout = () =&gt; &#123; if (!this.lastProcessShow) &#123; this.timer = requestAnimationFrame(this.move) &#125; &#125;&#125;,methods: &#123; move () &#123; this.wrap.scrollTop++ if (this.wrap.scrollTop &gt;= this.wrap.scrollHeight - 65) &#123; this.wrap.scrollTop = 0 &#125; this.timer = requestAnimationFrame(this.move) // 循环动画 &#125;&#125;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"webstorm中配置Eslint","slug":"webstorm中配置Eslint","date":"2018-06-19T05:28:50.000Z","updated":"2018-09-07T09:05:06.969Z","comments":true,"path":"2018/06/19/webstorm中配置Eslint/","link":"","permalink":"http://yoursite.com/2018/06/19/webstorm中配置Eslint/","excerpt":"团队开发中，在代码规范这一块经常会用到Eslint，这篇文章主要介绍 webstorm中Eslint的配置","text":"团队开发中，在代码规范这一块经常会用到Eslint，这篇文章主要介绍 webstorm中Eslint的配置 方式一：webstorm自带Eslint用webstorm自带Eslint这种方式的话，只需要打开setting，找到eslint设置页面，填完几个项目，勾选enable复选框就行了。注意：因为不同的项目可能使用的Eslint规范不一致，所以package这里指向项目里的Eslint安装包，configuration file 指向项目里的 .eslintrc.js 文件 使用方式自带的使用方式是在左侧项目目录列表上，选中某个你想eslint自动修复的文件夹或文件，右键，会出现fix eslint problems菜单。如下图。当然你也可以在右侧，代码编辑区域，选中某个要自动修复eslint监测出来有bug的文件，右键，点击fix eslint problems菜单。可自行设置快捷键。 方式二：使用插件Eslint这种方式呢，分两步，第一步：需要先到plugin插件库，找到eslint插件，点击install。如下图： 第二步：插件安装完成后，去setting页面，搜索eslint，这时你会发现，除了方式一那个eslint设置页面外，还多了一个设置页面，在setting对话框最下面的菜单。里面的设置项和方式一差不多。","categories":[{"name":"开发工具相关","slug":"开发工具相关","permalink":"http://yoursite.com/categories/开发工具相关/"}],"tags":[{"name":"webstorm","slug":"webstorm","permalink":"http://yoursite.com/tags/webstorm/"}]},{"title":"JS使用getComputedStyle()方法获取CSS属性值","slug":"JS使用getComputedStyle-方法获取CSS属性值","date":"2018-06-08T02:39:22.000Z","updated":"2018-09-07T09:05:06.961Z","comments":true,"path":"2018/06/08/JS使用getComputedStyle-方法获取CSS属性值/","link":"","permalink":"http://yoursite.com/2018/06/08/JS使用getComputedStyle-方法获取CSS属性值/","excerpt":"在对网页进行调试的过程中，经常会用到js来获取元素的CSS样式，方法有很多很多，现在仅把我经常用的方法总结如下： obj.style 这个方法JS只能获取写在html标签中的写在style属性中的值（style=”…”），而无法获取定义在css里面的属性。 IE中使用的是obj.currentStyle方法，而FF是用的是getComputedStyle 方法","text":"在对网页进行调试的过程中，经常会用到js来获取元素的CSS样式，方法有很多很多，现在仅把我经常用的方法总结如下： obj.style 这个方法JS只能获取写在html标签中的写在style属性中的值（style=”…”），而无法获取定义在css里面的属性。 IE中使用的是obj.currentStyle方法，而FF是用的是getComputedStyle 方法 “DOM2级样式”增强了document.defaultView，提供了getComputedStyle()方法。这个方法接受两个参数：要取得计算样式的元素和一个伪元素字符串（例如“:after”）。如果不需要伪元素信息，第二个参数可以是null。getComputerStyle()方法返回一个CSSStyleDeclaration对象，其中包含当前元素的所有计算的样式。 123456var myDiv = document.getElementById(\"myDiv\");var computedStyle = document.defaultView.getComputedStyle(myDiv, null);alert(computedStyle.backgroundColor); //\"red\"alert(computedStyle.width); //\"100px\"alert(computedStyle.height); //\"200px\"alert(computedStyle.border); //在某些浏览器中是“1px solid black” 边框属性可能也不会返回样式表中实际的border规则（Opera会返回，但其它浏览器不会）。存在这个差别的原因是不同浏览器解释综合属性的方式不同，因为设置这种属性实际上会涉及很多其他的属性。在设置border时，实际上是设置了四个边的边框宽度、颜色、样式属性。因此，即使computedStyle.border不会在所有浏览器中都返回值，但computedStyle.borderLeftWidth则会返回值。 需要注意的是，即使有些浏览器支持这种功能，但表示值的方式可能会有所区别。例如，Firefox和Safari会返回将所有颜色转换成RGB格式。因此，即使getComputedStyle()方法时，最好多在几种浏览器中测试一下。 IE不支持getComputedStyle()方法，但它有一种类似的概念。在IE中，每个具有style属性的元素还有一个currentStyle属性。这个属性是CSSStyleDeclaration的实例，包含当前元素全部计算后的样式。取得这些样式的方法差不多，如下： 123456var myDiv = document.getElementById(\"myDiv\");var computedStyle = myDiv.currentStyle;alert(computedStyle.backgroundColor); //\"red\"alert(computedStyle.width); //\"100px\"alert(computedStyle.height); //\"200px\"alert(computedStyle.border); //undefined 与DOM版本的方式一样，IE也没有返回border样式，因为这是一个综合属性。 下面这个函数，能够获取一个元素的任意 CSS 属性值。 1234567function getStyle(element, attr) &#123; if(element.currentStyle) &#123; return element.currentStyle[attr]; &#125; else &#123; return getComputedStyle(element, false)[attr]; &#125;&#125; 比如，本例中如果想获得 lists 的 left 属性值，只需要 1getStyle(lists,\"left\")","categories":[{"name":"JS中的小技巧","slug":"JS中的小技巧","permalink":"http://yoursite.com/categories/JS中的小技巧/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"typeof和instanceof的区别","slug":"typeof和instanceof的区别","date":"2018-06-06T08:09:14.000Z","updated":"2018-09-07T09:05:06.969Z","comments":true,"path":"2018/06/06/typeof和instanceof的区别/","link":"","permalink":"http://yoursite.com/2018/06/06/typeof和instanceof的区别/","excerpt":"instanceofinstanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。语法object instanceof constructor描述instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。","text":"instanceofinstanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。语法object instanceof constructor描述instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。 需要注意的是，如果表达式 obj instanceof Foo 返回true，则并不意味着该表达式会永远返回true，因为Foo.prototype属性的值有可能会改变，改变之后的值很有可能不存在于obj的原型链上，这时原表达式的值就会成为false。另外一种情况下，原表达式的值也会改变，就是改变对象obj的原型链的情况，虽然在目前的ES规范中，我们只能读取对象的原型而不能改变它，但借助于非标准的proto魔法属性，是可以实现的。比如执行obj.proto = {}之后，obj instanceof Foo就会返回false了。 String和Date对象同时也属于Object类型 typeoftypeof操作符返回一个字符串,指示未经计算的操作数的类型。 下表总结了 typeof 可能的返回值。有关类型和原语的更多信息，可查看 JavaScript数据结构 页面。 typeof和instanceof的区别 typeof和instanceof都可以用来判断变量，它们的用法有很大区别typeof会返回一个变量的基本类型,instanceof返回的是一个布尔值 如果我们想要判断一个变量是否存在，可以使用typeof：(不能使用if(a) 若a未声明，则报错) 123if(typeof a != &apos;undefined&apos;)&#123; //变量存在&#125; 需要注意的是，instanceof只能用来判断对象和函数，不能用来判断字符串和数字等 typeof不能用于判断是否为数组，因为都会返回object，判断是否为数组可以用一下几个方法： 1、constructor属性这个属性在我们使用js系统或者自己创建的对象的时候，会默认的加上，例如： 12var arr = [1,2,3]; //创建一个数组对象arr.prototype.constructor = Array; //这一句是系统默认加上的 所以我们就可以这样来判断： 12var arr = [1,2,3,1];arr.constructor === Array; // true 2、instanceofinstanceof是检测对象的原型链是否指向构造函数的prototype对象的，所以我们也可以用它来判断： 1arr instanceof Array; // true 3、Array.isArray() 1Array.isArray(arr) // true 4、Object.prototype.toString.call()instanceof是检测对象的原型链是否指向构造函数的prototype对象的，所以我们也可以用它来判断： 1Object.prototype.toString.call(arr) // &quot;[object Array]&quot; 判断数组终极解决方案:12345678910var arr = [1,2,3];function isArrayFn(obj)&#123; //封装一个函数if (typeof Array.isArray === &quot;function&quot;) &#123;return Array.isArray(obj); //浏览器支持则使用isArray()方法&#125;else&#123;//否则使用toString方法return Object.prototype.toString.call(obj) === &quot;[object Array]&quot;;&#125;&#125;alert(isArrayFn(arr));// true instanceof和多全局对象(多个frame或多个window之间的交互)在浏览器中，我们的脚本可能需要在多个窗口之间进行交互。多个窗口意味着多个全局环境，不同的全局环境拥有不同的全局对象，从而拥有不同的内置类型构造函数。这可能会引发一些问题。比如，表达式 [] instanceof window.frames[0].Array 会返回false，因为 Array.prototype !== window.frames[0].Array.prototype，因此你必须使用 Array.isArray(myObj) 或者 Object.prototype.toString.call(myObj) === “[object Array]”来判断myObj是否是数组。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"常见文件下载方法","slug":"常见文件下载方法","date":"2018-06-06T08:08:17.000Z","updated":"2018-09-07T09:05:06.970Z","comments":true,"path":"2018/06/06/常见文件下载方法/","link":"","permalink":"http://yoursite.com/2018/06/06/常见文件下载方法/","excerpt":"node 文件流下载.pipe() 1234567891011121314request(Base.mergeRequestOptions(&#123; http: DWY_GLOBAL.server.Static.http, host: DWY_GLOBAL.server.Static.host, port: DWY_GLOBAL.server.Static.port, headers:&#123;'Content-type':'application/json'&#125;, method: 'post', url: '/zipDownload', body:JSON.stringify(data), &#125;, req, res)).pipe(res) request(Base.mergeRequestOptions(&#123; method: 'get', url: '/api/orders/completeSet/export?'+ queryString.stringify(req.query), &#125;, req, res)).pipe(res)","text":"node 文件流下载.pipe() 1234567891011121314request(Base.mergeRequestOptions(&#123; http: DWY_GLOBAL.server.Static.http, host: DWY_GLOBAL.server.Static.host, port: DWY_GLOBAL.server.Static.port, headers:&#123;'Content-type':'application/json'&#125;, method: 'post', url: '/zipDownload', body:JSON.stringify(data), &#125;, req, res)).pipe(res) request(Base.mergeRequestOptions(&#123; method: 'get', url: '/api/orders/completeSet/export?'+ queryString.stringify(req.query), &#125;, req, res)).pipe(res) 2.Blob 1234567891011121314151617181920$http.post(URL , &#123; parameter:parameter&#125;,&#123; responseparameterType: 'arraybuffer'&#125;).then(function (res) &#123; var blob = new Blob([res.data], &#123;type: 'application/vnd.ms-excel'&#125;),fileName = '文件名称'; downFile(blob, fileName);)&#125;;function downFile(blob, fileName) &#123; if (window.navigator.msSaveOrOpenBlob) &#123; navigator.msSaveBlob(blob, fileName); &#125; else &#123; var link = document.createElement('a'); link.href = window.URL.createObjectURL(blob); link.download = fileName; link.click(); window.URL.revokeObjectURL(link.href); &#125;&#125; 3.模拟a标签 123456const saveLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');saveLink.href = 'http://jhtcc.com/Img/5a6e9b150aa98.png';saveLink.download = '5a6e9b150aa98.png';const event = document.createEvent('MouseEvents');event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);saveLink.dispatchEvent(event);","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"Vue 中 proxy代理","slug":"proxy代理","date":"2018-06-06T08:05:17.000Z","updated":"2018-09-07T09:05:06.967Z","comments":true,"path":"2018/06/06/proxy代理/","link":"","permalink":"http://yoursite.com/2018/06/06/proxy代理/","excerpt":"Vue 框架开发的时候，会遇到跨域的问题，可在config/index.js 里配置proxyTable内容，使用proxy 代理。","text":"Vue 框架开发的时候，会遇到跨域的问题，可在config/index.js 里配置proxyTable内容，使用proxy 代理。 12345678910// config/index.js 文件proxyTable: &#123; '/api': &#123; target: 'http://192.168.149.90:8080/', // 设置你调用的接口域名和端口号 changeOrigin: true, // 跨域 pathRewrite: &#123; '^/api': '/' &#125; &#125; &#125;, 这里理解成用‘/api’代替target里面的地址，后面组件中我们掉接口时直接用api代替 比如我要调用’http://192.168.149.90:8080/xxx/duty?time=2017-07-07 14:57:22’，直接写‘/api/xxx/duty?time=2017-07-07 14:57:22’即可 在dev.env.js 里配置开发环境请求地址 12345// config/dev.env.js 文件module.exports = merge(prodEnv, &#123; NODE_ENV: '\"development\"', ADMIN_SERVER: '\"/api/\"',&#125;); 若请求插件用的 axios，配置如下 123const adminServer = axios.create(&#123; baseURL: process.env.ADMIN_SERVER,&#125;);","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"}]},{"title":"格式化金额","slug":"格式化金额","date":"2018-06-06T02:36:10.000Z","updated":"2018-09-07T09:05:06.972Z","comments":true,"path":"2018/06/06/格式化金额/","link":"","permalink":"http://yoursite.com/2018/06/06/格式化金额/","excerpt":"321000 转化成 321,000.00格式","text":"321000 转化成 321,000.00格式12345678910111213141516171819202122const digitsRE = /(\\d&#123;3&#125;)(?=\\d)/gexport function currency(value, currency, decimals) &#123; value = parseFloat(value) if (!isFinite(value) || (!value &amp;&amp; value !== 0)) return '' currency = currency != null ? currency : '' decimals = decimals != null ? decimals : 2 var stringified = Math.abs(value).toFixed(decimals) var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified var i = _int.length % 3 var head = i &gt; 0 ? (_int.slice(0, i) + (_int.length &gt; 3 ? ',' : '')) : '' var _float = decimals ? stringified.slice(-1 - decimals) : '' var sign = value &lt; 0 ? '-' : '' return sign + currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float&#125;","categories":[{"name":"常用格式化处理","slug":"常用格式化处理","permalink":"http://yoursite.com/categories/常用格式化处理/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"时间戳转日期dateformat","slug":"时间戳转日期dateformat","date":"2018-06-06T02:33:25.000Z","updated":"2018-09-07T09:05:06.971Z","comments":true,"path":"2018/06/06/时间戳转日期dateformat/","link":"","permalink":"http://yoursite.com/2018/06/06/时间戳转日期dateformat/","excerpt":"时间戳转日期","text":"时间戳转日期 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758dateformat (date, fmt = 'YYYY-MM-DD') &#123; if (!date) &#123; return '' &#125; if (date == '-') &#123; return '-' &#125; if (typeof date === 'string') &#123; date = new Date(date.replace(/-/g, '/')) &#125; if (typeof date === 'number') &#123; date = new Date(date) &#125; var o = &#123; 'M+': date.getMonth() + 1, 'D+': date.getDate(), 'h+': date.getHours() % 12 === 0 ? 12 : date.getHours() % 12, 'H+': date.getHours(), 'm+': date.getMinutes(), 's+': date.getSeconds(), 'q+': Math.floor((date.getMonth() + 3) / 3), S: date.getMilliseconds() &#125; var week = &#123; '0': '\\u65e5', '1': '\\u4e00', '2': '\\u4e8c', '3': '\\u4e09', '4': '\\u56db', '5': '\\u4e94', '6': '\\u516d' &#125; if (/(Y+)/.test(fmt)) &#123; fmt = fmt.replace( RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length) ) &#125; if (/(E+)/.test(fmt)) &#123; fmt = fmt.replace( RegExp.$1, (RegExp.$1.length &gt; 1 ? RegExp.$1.length &gt; 2 ? '\\u661f\\u671f' : '\\u5468' : '') + week[date.getDay() + ''] ) &#125; for (var k in o) &#123; if (new RegExp('(' + k + ')').test(fmt)) &#123; fmt = fmt.replace( RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length) ) &#125; &#125; return fmt&#125;","categories":[{"name":"常用格式化处理","slug":"常用格式化处理","permalink":"http://yoursite.com/categories/常用格式化处理/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]}]}